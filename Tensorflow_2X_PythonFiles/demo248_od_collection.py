# -*- coding: utf-8 -*-
"""Demo248_OD_Collection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Sm4EfuiGqNov0yjC2OVG1e-JnytXdVH

# Reference https://github.com/nicknochnack/TFODCourse

# 1. Import Dependencies
"""

!pip install opencv-python

# Import opencv
import cv2 
# Import uuid
import uuid
# Import Operating System
import os
# Import time
import time

"""# 2. Define Images to Collect"""

labels = ['thumbsup', 'thumbsdown', 'peace']

"""# 3. Setup Folders """

IMAGES_PATH = os.path.join('Tensorflow', 'workspace', 'images', 'collectedimages')

if not os.path.exists(IMAGES_PATH):
    if os.name == 'posix': #linux
        !mkdir -p {IMAGES_PATH}
    if os.name == 'nt': #windows
         !mkdir {IMAGES_PATH}
for label in labels:
    path = os.path.join(IMAGES_PATH, label)
    if not os.path.exists(path):
        !mkdir {path}

"""# 4. Capture Images"""

cap = cv2.VideoCapture(0)
cv2.namedWindow("frame")
img_counter = 0
for label in labels:
    print("[INFO] Collecting for {}".format(label))
    while True:

        ret, frame = cap.read()
        if not ret:
            print("[INFO] Failed to capture")
            break
        cv2.imshow("frame", frame)

        key = cv2.waitKey(1)
        if key%256 == 27:
            # ESC pressed
            print("[INFO] Closing")
            break
        elif key%256 == 32:
            # SPACE pressed
            img_name = os.path.join(IMAGES_PATH,label,label+'.'+'{}.jpg'.format(str(uuid.uuid1())))
            cv2.imwrite(img_name, frame)
            print("[INFO] {} Saved".format(img_name))
            img_counter += 1

cap.release()
cv2.destroyAllWindows()

# for label in labels:
#     cap = cv2.VideoCapture(0)
#     print('Collecting images for {}'.format(label))
#     time.sleep(5)
#     for imgnum in range(number_imgs):
#         print('Collecting image {}'.format(imgnum))
#         ret, frame = cap.read()
#         imgname = os.path.join(IMAGES_PATH,label,label+'.'+'{}.jpg'.format(str(uuid.uuid1())))
#         cv2.imwrite(imgname, frame)
#         cv2.imshow('frame', frame)
#         time.sleep(2)

#         if cv2.waitKey(1) & 0xFF == ord('q'):
#             break
# cap.release()
# cv2.destroyAllWindows()

"""# 5. Image Labelling"""

!pip install --upgrade pyqt5 lxml

!pip list

LABELIMG_PATH = os.path.join('Tensorflow', 'labelimg')

if not os.path.exists(LABELIMG_PATH):
    !mkdir {LABELIMG_PATH}
    !git clone https://github.com/tzutalin/labelImg {LABELIMG_PATH}

if os.name == 'posix':
    !make qt5py3
if os.name =='nt':
    !cd {LABELIMG_PATH} && pyrcc5 -o libs/resources.py resources.qrc

!cd {LABELIMG_PATH} && python labelImg.py

"""# 6. Move them into a Training and Testing Partition

# OPTIONAL - 7. Compress them for Colab Training
"""

TRAIN_PATH = os.path.join('Tensorflow', 'workspace', 'images', 'train')
TEST_PATH = os.path.join('Tensorflow', 'workspace', 'images', 'test')
ARCHIVE_PATH = os.path.join('Tensorflow', 'workspace', 'images', 'archive.tar.gz')

!tar -czf {ARCHIVE_PATH} {TRAIN_PATH} {TEST_PATH}

