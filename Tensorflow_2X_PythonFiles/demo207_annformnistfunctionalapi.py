# -*- coding: utf-8 -*-
"""Demo207_ANNforMNISTFunctionalAPI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xd3nXXCalRXp_TgmX8TD_m89eVYGdxQD
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
print(tf.__version__)

"""## Let's load the dataset using keras datasets"""

dataset = tf.keras.datasets.mnist

(X_train, y_train), (X_test, y_test) = dataset.load_data()
X_train, X_test = X_train/255.0 , X_test/255.0

print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

X_train = X_train.reshape(60000, -1)
X_test = X_test.reshape(10000, -1)

print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

from tensorflow.keras.layers import Input, Dense, Dropout
from tensorflow.keras.models import Model

N, D = X_train.shape

i_layer = Input(shape = (D,))
h_layer = Dense(64, activation='relu')(i_layer)
h_layer = Dropout(0.5)(h_layer)
o_layer = Dense(10, activation='softmax')(h_layer)
model = Model(i_layer, o_layer)

model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy'])

report = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs = 30)

plt.plot(report.history['loss'], label="loss")
plt.plot(report.history['val_loss'], label="validation_loss")
plt.legend()

plt.plot(report.history['accuracy'], label="accuracy")
plt.plot(report.history['val_accuracy'], label="validation_accuracy")
plt.legend()

print("Train eval: ", model.evaluate(X_train, y_train))
print("Test eval: ", model.evaluate(X_test, y_test))

y_pred = model.predict(X_test).argmax(axis=1)

print(y_test.shape)
print(y_pred.shape)

from sklearn.metrics import confusion_matrix
import itertools
cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(10,10))
plt.imshow(cm, cmap=plt.cm.Blues)
for i,j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
  plt.text(j, i, format(cm[i,j], 'd'),
           horizontalalignment = 'center',
           color='black')
plt.xlabel("Predicted labels")
plt.ylabel("True labels")
plt.xticks(list(range(10)))
plt.yticks(list(range(10)))
plt.title('Confusion matrix')
plt.colorbar()
plt.show()

misshits = np.where(y_pred!=y_test)[0]
index = np.random.choice(misshits)
plt.imshow(X_test[index].reshape(28,28), cmap='gray')
plt.title("Predicted = " + str(y_pred[index]) + ", Real = " + str(y_test[index]))

